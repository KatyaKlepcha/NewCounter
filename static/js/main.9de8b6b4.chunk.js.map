{"version":3,"sources":["Components/Settings/SettingsDisplay.module.css","Components/Display/Display.module.css","Components/Buttons/Buttons.module.css","Components/Buttons/Buttons.tsx","Components/Settings/SettingsDisplay.tsx","Components/Display/Display.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Buttons","props","useEffect","storageMax","localStorage","getItem","newStorageMax","JSON","parse","setInputMax","increment","count","inputMax","setCount","setChangeIncrement","reset","inputStart","settings","setItem","stringify","setChangeReset","onClick","title","disabled","className","css","buttons","SettingsDisplay","disabledSettingsButton","settingsDisplay","type","onChange","e","numberMax","Number","currentTarget","value","error","input_max","numberStart","setInputStart","input_start","buttonSettings","changeIncrement","changeReset","Display","inputValidation","display","buttonsDisplay","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9de8b6b4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"SettingsDisplay_settings__EXRvq\",\"settingsDisplay\":\"SettingsDisplay_settingsDisplay__untoR\",\"buttonSettings\":\"SettingsDisplay_buttonSettings__1bKvO\",\"input_max\":\"SettingsDisplay_input_max__8Y-NG\",\"input_start\":\"SettingsDisplay_input_start__1wIqy\",\"error\":\"SettingsDisplay_error__1vbR4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__3EDzQ\",\"buttonsDisplay\":\"Display_buttonsDisplay__2prFZ\",\"count\":\"Display_count__3F9I-\",\"error\":\"Display_error__G91gi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Buttons_buttons__35LCr\"};","import React, {useEffect} from 'react';\r\nimport css from './Buttons.module.css'\r\n\r\ntype ButtonsPropsType = {\r\n    title: string\r\n    disabled: boolean\r\n    count: number\r\n    setCount: (number: number) => void\r\n    inputStart: number\r\n    inputMax: number\r\n    setInputMax: (number: number) => void\r\n    changeIncrement: boolean\r\n    setChangeIncrement: (boolean: boolean) => void\r\n    changeReset: boolean\r\n    setChangeReset: (boolean: boolean) => void\r\n}\r\n\r\nconst Buttons = (props: ButtonsPropsType) => {\r\n    useEffect(() => {\r\n        let storageMax = localStorage.getItem('inputMax')\r\n        if (storageMax) {\r\n            let newStorageMax = JSON.parse(storageMax)\r\n            props.setInputMax(newStorageMax)\r\n        }\r\n    }, [])\r\n\r\n    const buttonsClick = () => {\r\n        if (props.title === 'increment') {\r\n            increment()\r\n        } else if (props.title === 'reset') {\r\n            reset()\r\n        } else if (props.title === 'settings') {\r\n            settings()\r\n        }\r\n    }\r\n\r\n    const increment = () => {\r\n        if (props.count + 1 < props.inputMax) {\r\n            props.setCount(props.count + 1);\r\n        } else {\r\n            props.setCount(props.count + 1);\r\n            props.setChangeIncrement(true)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        props.setCount(props.inputStart)\r\n    }\r\n    const settings = () => {\r\n        localStorage.setItem('inputMax', JSON.stringify(props.inputMax))\r\n        props.setCount(props.inputStart);\r\n        props.setChangeIncrement(false)\r\n        props.setChangeReset(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={buttonsClick}\r\n                    disabled={props.disabled}\r\n                    className={css.buttons}>{props.title}\r\n\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React, {ChangeEvent} from 'react';\r\nimport Buttons from \"../Buttons/Buttons\"\r\nimport css from './SettingsDisplay.module.css'\r\n\r\ntype SettingsPropsType = {\r\n    count: number\r\n    setCount: (number: any) => void\r\n    inputStart: number\r\n    setInputStart: (number: any) => void\r\n    inputMax: number\r\n    setInputMax: (number: any) => void\r\n    changeIncrement: boolean\r\n    setChangeIncrement: (boolean: boolean) => void\r\n    changeReset: boolean\r\n    setChangeReset: (boolean: boolean) => void\r\n}\r\n\r\nconst SettingsDisplay = (props: SettingsPropsType) => {\r\n\r\n    let onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        let numberMax = (Number(e.currentTarget.value))\r\n        props.setInputMax(numberMax)\r\n        if (numberMax > props.inputMax) {\r\n            props.setChangeIncrement(true)\r\n            props.setChangeReset(true)\r\n        }\r\n        props.setCount('Enter values and press \"set\"')\r\n\r\n        if (numberMax < 0) {\r\n            props.setCount('Incorrect value!')\r\n        } else if (numberMax === props.inputStart) {\r\n            props.setCount('Incorrect value!')\r\n        } else if (numberMax < props.inputStart) {\r\n            props.setCount('Incorrect value!')\r\n        } else if (numberMax <= 0 && props.inputStart < 0) {\r\n            props.setCount('Incorrect value!')\r\n        } else if (numberMax > 0 && props.inputStart < 0) {\r\n            props.setCount('Incorrect value!')\r\n        }\r\n    }\r\n\r\n    let onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        let numberStart = (Number(e.currentTarget.value))\r\n        props.setInputStart(numberStart)\r\n        if (numberStart > props.inputStart) {\r\n            props.setChangeIncrement(true)\r\n            props.setChangeReset(true)\r\n        }\r\n        props.setCount('Enter values and press \"set\"')\r\n        if (numberStart < 0 && props.inputMax > 0) {\r\n            props.setCount('Incorrect value!')\r\n        } else if (numberStart === props.inputMax) {\r\n            props.setCount('Incorrect value!')\r\n        } else if (numberStart > props.inputMax) {\r\n            props.setCount('Incorrect value!')\r\n        } else if (props.inputMax < 0 && numberStart < 0) {\r\n            props.setCount('Incorrect value!')\r\n        }\r\n    }\r\n\r\n    let disabledSettingsButton = props.inputStart === props.inputMax ||\r\n        props.inputStart < 0 ||\r\n        props.inputMax < 0 ||\r\n        props.inputStart > props.inputMax ||\r\n        props.count === props.inputStart ||\r\n        props.count <= props.inputMax\r\n\r\n    return (\r\n        <div className={css.settings}>\r\n            <div className={css.settingsDisplay}>\r\n                <div>\r\n                    <span>Max value: </span>\r\n                    <input type={'number'}\r\n                           onChange={onChangeMaxValue}\r\n                           value={props.inputMax}\r\n                           className={props.inputMax < 0 ||\r\n                           props.inputStart === props.inputMax ? css.error : css.input_max}/>\r\n                </div>\r\n                <div>\r\n                    <span>Start value: </span>\r\n                    <input type={'number'}\r\n                           onChange={onChangeStartValue}\r\n                           value={props.inputStart}\r\n                           className={props.inputStart < 0 ||\r\n                           props.inputStart === props.inputMax ||\r\n                           props.inputStart > props.inputMax ? css.error : css.input_start}/>\r\n                </div>\r\n            </div>\r\n            <div className={css.buttonSettings}>\r\n                <Buttons title={'settings'}\r\n                         disabled={disabledSettingsButton}\r\n                         count={props.count}\r\n                         setCount={props.setCount}\r\n                         inputStart={props.inputStart}\r\n                         inputMax={props.inputMax}\r\n                         setInputMax={props.setInputMax}\r\n                         changeIncrement={props.changeIncrement}\r\n                         setChangeIncrement={props.setChangeIncrement}\r\n                         changeReset={props.changeReset}\r\n                         setChangeReset={props.setChangeReset}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SettingsDisplay;","import React from 'react';\r\nimport Buttons from \"../Buttons/Buttons\";\r\nimport css from \"./Display.module.css\"\r\n\r\ntype DisplayPropsType = {\r\n    count: number\r\n    setCount: (number: any) => void\r\n    inputStart: number\r\n    inputMax: number\r\n    setInputMax: (number: any) => void\r\n    changeIncrement: boolean\r\n    setChangeIncrement: (boolean: boolean) => void\r\n    changeReset: boolean\r\n    setChangeReset: (boolean: boolean) => void\r\n}\r\n\r\nconst Display = (props: DisplayPropsType) => {\r\n\r\n\r\n    let inputValidation = props.count === props.inputMax ||\r\n    props.inputStart === props.inputMax ||\r\n    props.inputStart < 0 ||\r\n    props.inputMax < 0 ||\r\n    props.inputMax < props.inputStart ? css.error : css.count\r\n\r\n    return (\r\n        <div className={css.display}>\r\n\r\n            <div\r\n                className={inputValidation}>{props.count}\r\n            </div>\r\n\r\n            <div className={css.buttonsDisplay}>\r\n                <Buttons title={'increment'}\r\n                         disabled={props.changeIncrement}\r\n                         count={props.count}\r\n                         setCount={props.setCount}\r\n                         inputStart={props.inputStart}\r\n                         inputMax={props.inputMax}\r\n                         setInputMax={props.setInputMax}\r\n                         changeIncrement={props.changeIncrement}\r\n                         setChangeIncrement={props.setChangeIncrement}\r\n                         changeReset={props.changeReset}\r\n                         setChangeReset={props.setChangeReset}\r\n                />\r\n                <Buttons title={'reset'}\r\n                         disabled={props.changeReset}\r\n                         count={props.count}\r\n                         setCount={props.setCount}\r\n                         inputStart={props.inputStart}\r\n                         inputMax={props.inputMax}\r\n                         setInputMax={props.setInputMax}\r\n                         changeIncrement={props.changeIncrement}\r\n                         setChangeIncrement={props.setChangeIncrement}\r\n                         changeReset={props.changeReset}\r\n                         setChangeReset={props.setChangeReset}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport SettingsDisplay from \"./Components/Settings/SettingsDisplay\";\nimport Display from \"./Components/Display/Display\";\n\nfunction App() {\n    let [count, setCount] = useState(0)\n    let [inputMax, setInputMax] = useState(0)\n    let [inputStart, setInputStart] = useState(0)\n\n    let [changeIncrement, setChangeIncrement] = useState(false)\n    let [changeReset, setChangeReset] = useState(false)\n\n\n    return (\n        <div className=\"App\">\n            <SettingsDisplay count={count}\n                             setCount={setCount}\n                             inputStart={inputStart}\n                             setInputStart={setInputStart}\n                             inputMax={inputMax}\n                             setInputMax={setInputMax}\n                             changeIncrement={changeIncrement}\n                             setChangeIncrement={setChangeIncrement}\n                             changeReset={changeReset}\n                             setChangeReset={setChangeReset}\n                             />\n\n            <Display count={count}\n                     setCount={setCount}\n                     inputStart={inputStart}\n                     inputMax={inputMax}\n                     setInputMax={setInputMax}\n                     changeIncrement={changeIncrement}\n                     changeReset={changeReset}\n                     setChangeIncrement={setChangeIncrement}\n                     setChangeReset={setChangeReset}\n                     />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}